package com.example.datn.Service;

import com.example.datn.DTO.ChiTietDatLichDTO;
import com.example.datn.DTO.XacNhanDatLichDTO;
import com.example.datn.Entity.GiaTheoKhungGio;
import com.example.datn.Entity.KhungGio;
import com.example.datn.Entity.LichDatSan;
import com.example.datn.Entity.TaiKhoan;
import com.example.datn.Repository.GiaTheoKhungGioRepo;
import com.example.datn.Repository.LichDatSanRepo;
import com.example.datn.Repository.TaiKhoanRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class XacNhanDatLichService {

    @Autowired
    private LichDatSanRepo lichDatSanRepository;

    @Autowired
    private GiaTheoKhungGioRepo giaTheoKhungGioRepository;

    @Autowired
    private TaiKhoanRepo taiKhoanRepository;

    public List<Integer> kiemTraHopLeTamThoi(XacNhanDatLichDTO xacNhan) {
        List<Integer> lichTamHopLe = new ArrayList<>();

        try {
            List<ChiTietDatLichDTO> danhSach = xacNhan.getChiTietDatLichList();

            Optional<TaiKhoan> optionalTaiKhoan = taiKhoanRepository.findByEmail(xacNhan.getEmail());
            if (optionalTaiKhoan.isEmpty()) {
                System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email: " + xacNhan.getEmail());
                return lichTamHopLe;
            }

            for (ChiTietDatLichDTO chiTiet : danhSach) {
                System.out.println("üîç [CHECK] Ng√†y = " + chiTiet.getNgayDat()
                        + ", ID Gi√° = " + chiTiet.getIdGiaTheoKhungGio());

                LichDatSan lichSan = lichDatSanRepository.findListLichTrongByNgaySanKhungGio(
                        chiTiet.getNgayDat(), chiTiet.getIdGiaTheoKhungGio()
                );

                if (lichSan == null) {
                    System.err.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l·ªãch tr·ªëng ph√π h·ª£p.");
                    continue;
                }

                if (lichSan.getTrangThai() != 3 || lichSan.getTaiKhoan() != null) {
                    System.err.println("üö´ L·ªãch ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ho·∫∑c kh√¥ng c√≤n tr·ªëng.");
                    continue;
                }

                Optional<GiaTheoKhungGio> giaOpt = giaTheoKhungGioRepository.findById(chiTiet.getIdGiaTheoKhungGio());
                if (giaOpt.isEmpty()) {
                    System.err.println("üö´ ID gi√° theo khung gi·ªù kh√¥ng h·ª£p l·ªá: " + chiTiet.getIdGiaTheoKhungGio());
                    continue;
                }

                GiaTheoKhungGio gia = giaOpt.get();

                if (!gia.getSanBong().getTen_san_bong().trim().equalsIgnoreCase(chiTiet.getTenSan().trim())) {
                    System.err.println("üö´ T√™n s√¢n kh√¥ng kh·ªõp v·ªõi ID gi√° theo khung gi·ªù.");
                    continue;
                }

                KhungGio khungGio = gia.getKhungGio();
                String start = khungGio.getGioBatDau().format(DateTimeFormatter.ofPattern("HH:mm"));
                String end = khungGio.getGioKetThuc().format(DateTimeFormatter.ofPattern("HH:mm"));
                String khungGioStr = start + "-" + end;
                String thoiGianClean = chiTiet.getThoiGian().replaceAll("\\s+", "");

                if (!khungGioStr.equalsIgnoreCase(thoiGianClean)) {
                    System.err.println("üö´ Khung gi·ªù kh√¥ng kh·ªõp.");
                    continue;
                }

                BigDecimal giaHeThong = gia.getGiaThue();
                BigDecimal giaClient = chiTiet.getGia();

                if (giaClient == null || giaClient.compareTo(giaHeThong) != 0 || giaClient.compareTo(BigDecimal.ZERO) <= 0) {
                    System.err.println("üö´ Gi√° kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã thay ƒë·ªïi.");
                    continue;
                }

                // ‚úÖ T·∫•t c·∫£ ƒëi·ªÅu ki·ªán h·ª£p l·ªá ‚Üí th√™m v√†o danh s√°ch h·ª£p l·ªá
                lichTamHopLe.add(lichSan.getId());
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return lichTamHopLe;
    }


    public List<Integer> luuDatLich(XacNhanDatLichDTO xacNhan) {
        List<Integer> idLichCapNhat = new ArrayList<>();

        try {
            List<ChiTietDatLichDTO> danhSach = xacNhan.getChiTietDatLichList();

            Optional<TaiKhoan> optionalTaiKhoan = taiKhoanRepository.findByEmail(xacNhan.getEmail());
            if (optionalTaiKhoan.isEmpty()) {
                System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email: " + xacNhan.getEmail());
                return idLichCapNhat;
            }
            TaiKhoan taiKhoan = optionalTaiKhoan.get();

            for (ChiTietDatLichDTO chiTiet : danhSach) {
                System.out.println("üîç ƒêang t√¨m l·ªãch cho: Ng√†y = " + chiTiet.getNgayDat()
                        + ", ID Gi√° = " + chiTiet.getIdGiaTheoKhungGio());

                LichDatSan lichSan = lichDatSanRepository.findListLichTrongByNgaySanKhungGio(
                        chiTiet.getNgayDat(), chiTiet.getIdGiaTheoKhungGio()
                );

                if (lichSan == null) {
                    System.err.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l·ªãch tr·ªëng ph√π h·ª£p.");
                    continue;
                }

                if (lichSan.getTrangThai() != 3 || lichSan.getTaiKhoan() != null) {
                    System.err.println("üö´ L·ªãch ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t b·ªüi ng∆∞·ªùi kh√°c ho·∫∑c kh√¥ng c√≤n tr·ªëng.");
                    continue;
                }

                Optional<GiaTheoKhungGio> giaOpt = giaTheoKhungGioRepository.findById(chiTiet.getIdGiaTheoKhungGio());
                if (giaOpt.isEmpty()) {
                    System.err.println("üö´ ID gi√° theo khung gi·ªù kh√¥ng h·ª£p l·ªá: " + chiTiet.getIdGiaTheoKhungGio());
                    continue;
                }

                GiaTheoKhungGio gia = giaOpt.get();

                if (!gia.getSanBong().getTen_san_bong().trim().equalsIgnoreCase(chiTiet.getTenSan().trim())) {
                    System.err.println("üö´ T√™n s√¢n kh√¥ng kh·ªõp v·ªõi ID gi√° theo khung gi·ªù.");
                    continue;
                }

                KhungGio khungGio = gia.getKhungGio();
                String start = khungGio.getGioBatDau().format(DateTimeFormatter.ofPattern("HH:mm"));
                String end = khungGio.getGioKetThuc().format(DateTimeFormatter.ofPattern("HH:mm"));
                String khungGioStr = start + "-" + end;
                String thoiGianClean = chiTiet.getThoiGian().replaceAll("\\s+", "");

                if (!khungGioStr.equalsIgnoreCase(thoiGianClean)) {
                    System.err.println("üö´ Khung gi·ªù kh√¥ng kh·ªõp v·ªõi ID gi√° theo khung gi·ªù.");
                    continue;
                }

                BigDecimal giaHeThong = gia.getGiaThue();
                BigDecimal giaClient = chiTiet.getGia();

                if (giaClient == null || giaClient.compareTo(giaHeThong) != 0 || giaClient.compareTo(BigDecimal.ZERO) <= 0) {
                    System.err.println("üö´ Gi√° g·ª≠i l√™n kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã s·ª≠a ƒë·ªïi: " + giaClient);
                    continue;
                }

                // G√°n th√¥ng tin ƒë·∫∑t l·ªãch
                lichSan.setTrangThai(0);
                lichSan.setGiaApDung(giaHeThong);
                lichSan.setGhiChu("");
                lichSan.setTaiKhoan(taiKhoan);
                lichSan.setSanBong(lichSan.getGiaTheoKhungGio().getSanBong());

                lichDatSanRepository.save(lichSan);
                idLichCapNhat.add(lichSan.getId());

                System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t l·ªãch ID: " + lichSan.getId());
            }

        } catch (Exception e) {
            e.printStackTrace(); // üëà b·∫°n c≈©ng c√≥ th·ªÉ d√πng logger.error("L·ªói x√°c nh·∫≠n l·ªãch", e);
            // c√≥ th·ªÉ throw l·∫°i n·∫øu mu·ªën controller b·∫Øt
            // throw new RuntimeException("L·ªói khi x√°c nh·∫≠n l·ªãch", e);
        }

        return idLichCapNhat;
    }


}

